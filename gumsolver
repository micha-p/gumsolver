#! /usr/bin/lua

dofile ("display.lua")
dofile ("constraints_with_values.lua")
dofile ("table-mode.lua")

VERSION = "1.0"
SCRIPT=string.match(arg[0],"[^%w%-]*([%w%-]*)$")
TABLE=nil 
DEBUG=nil
PROMPT=nil
RELATIVE=nil
DELIMITER=","
CONNECTORS={}

help={}
help[1]="gumsolver -- resolving equations by propagation of uncertainties"
help[2]="usage:    gumsolver [options] [file]"
help[3]="options:  -t             table mode"
help[4]="          -d delimiter   column separator for table"
help[5]="          -i             interactive (use readline wrapper)"
help[6]="          -D             debug messages"
help[7]="          -a             start displaying absolute uncertainties (default)"
help[8]="          -r             start displaying relative uncertainties"
help[9]="          -v             display version"
help[10]="         -h             this help"

while arg[1] do
   TABLE  = TABLE  or arg[1]=="-t"
   PROMPT = PROMPT or arg[1]=="-i" and "> "
   DEBUG  = DEBUG  or arg[1]=="-D"
   if arg[1]=="-d" then 
      table.remove(arg,1)
      DELIMITER = ( arg[1]=="\\t" and "\t" or arg[1])
   end
   if arg[1]=="-r" then 
      RELATIVE = not nil
   end
   if arg[1]=="-a" then 
      RELATIVE = nil
   end
   if arg[1]=="-h" then 
      for k,v in ipairs (help) do print(v) end; return      
   end
   if arg[1]=="-v" then 
      print ("version "..VERSION); return     
   end
   table.remove(arg,1)
end


function process_new(c,name)
   c[name]=make_connector("")
   probe (name, c[name])
return c[name]
end


function process_line (c, input)   
   local name=input:match("%s*([%a][%w%-]*)%s*=?")
   local expr=input:match(".*=(.*)$")
   if c[name] then
         if DEBUG then printprobe2stderr (name, ":", expr and vreader(expr) or "?") end
         run (c, c[name], expr and vreader(expr))
   else 
      if expr then
         probe (name, process_formula (c, input))
         if DEBUG then printprobe2stderr (name, ":", expr) end
      else
         process_new (c, name)
         if DEBUG then printprobe2stderr (name, ":", "?") end
      end
   end 
end


function printprobe2stderr (name, sep, value)
    io.stderr:write (name .. "\t " .. sep .. " \t" .. tostring(value) .."\n")
end

function probe2stderr (name, connector)
  local me = {}
  me = make_actor (function () printprobe2stderr (name, genout (connector.get())) end, function () printprobe2stderr (name,"=","?") end)
  connector.connect(me)
  return me
end


if TABLE then
   process_table(CONNECTORS, DELIMITER)
else
   if PROMPT and not DEBUG then io.write(SCRIPT.." version "..VERSION.."\n") end
   if DEBUG  then io.stderr:write(SCRIPT.." version "..VERSION.."   DEBUG MODE\n") end
   if PROMPT then io.write(PROMPT) end
   for line in io.lines() do 
      line = line:match("%s*(.*)$")
      line = line:find("#") and line:match("([^#]*)#.*$") or line
      if line:find("^!D.*") then 
         function short (table)
         return string.gsub (tostring(table),"table: ","")
         end
         for k,v in pairs (CONNECTORS) do 
            value=(v.get())
            informant=(v.value())
            ltable=(v.listeners())
            print (k, (v.info()) or "", 
                   informant == 1 and "user" or "",
                   informant and RELATIVE and value.rel() or informant and value.abs() or "")
            if DEBUG then 
               io.write (short(v), "\t") 
               for k,l in pairs(ltable) do io.write (short(l), informant == l and "! " or " ") end 
               print () 
               print () 
               end    
         end line="" 
      end
      if line:find("^!Q") then break end
      if line:find("^!P") then print (line:match("^!PR?I?N?T? (.*)$") or "") ; line="" end
      if line:find("^!R") then RELATIVE=not nil ; line="" end
      if line:find("^!A") then RELATIVE=nil     ; line="" end
      if line:len() > 0 then process_line (CONNECTORS, line) end
      if PROMPT then io.write(PROMPT) end 
   end
   print()
end






   
   
