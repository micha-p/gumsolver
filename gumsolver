#! /usr/bin/lua

-- TODO:
-- use stringbuffers and table.concat for collecting output
-- remove the need for a itertable which was just a neccessary quick hack. 
-- redo RECORD MODE: 
-- it is table shown as a non interactive mask
-- shown fields from table-columns
-- when TABLE==not nil and MASK==not nil

package.path = package.path .. ";include/?.lua"
require 'display'
require 'stderr'
require 'options'
require 'table'

require 'constraints_with_values'   	-- PRINTX redefined, 
require 'expressions'			-- global CONNECTORS
require 'units'   			-- overwrite: PRINT16, printprobe
require 'process'
require 'csv'
require 'table-mode'
require 'dump'
require 'records'
require 'mask'				-- printprobe -> oldprintprobe
require 'trace'
require 'optimization'
require 'differentiation'
require 'diff'

HELP={	"gumsolver -- resolving equations by propagation of uncertainties",
  	"usage:    gumsolver [options]",
	"options:  -a        absolute error for all output (default and higher precedence)",
	"          -r        relative error for all output",

	"          -s        short number format with errors suppressed completely",
	"          -z        unspecified error is displayed as zero",
	"          -f        full number format (irrespective of shown errors)",

	"          -b        batch mode (noninteractive)",
	"          -m 	     mask mode", 
	"          -t        table mode",
	"          -i file   include file line by line in batch mode or interactive mode",
	"          -d        delimiter for tabular input is specified in next char",

	"          -q        quiet and restricted output",
	"          -v        display version and terminate",
	"          -h        display help and terminate"}


-- GLOBALS
VERSION    	= "0.5.0"
SCRIPT      	= arg and string.match(arg[0],"[^%w%-]*([%w%-]*)$")
RECORDS     	={}	-- integer , record
DEFINITIONS	={}	-- integer , string
COLNAMES    	={}	-- integer , string
GLOBALS 	= collect_short_options(arg)

-- MODES
BATCH	= string.find(GLOBALS,"b")
MASK	= string.find(GLOBALS,"m")
TABLE	= string.find(GLOBALS,"t")
RECORD 	= MASK and TABLE

-- STDERR FLAGS
DEBUG 	= nil
TRACE 	= nil
ITER 	= nil
DUMP	= nil

-- GLOBAL OUTPUT FLAGS
MUTE	= string.find(GLOBALS,"q") or string.find(GLOBALS,"m")
RELATIVE= string.find(GLOBALS,"r")
RELATIVE= not string.find(GLOBALS,"a")
ZERO 	= string.find(GLOBALS,"z")
SHORT	= string.find(GLOBALS,"s")
BEST 	= not string.find(GLOBALS,"f")

dpos=string.find(GLOBALS,"d")
if dpos then 
   DELIMITER=string.sub(GLOBALS,dpos+1,dpos+1)
else
   DELIMITER="\t"
end

if string.find(GLOBALS,"h") then 
   for k,v in ipairs (HELP) do print(v) end; os.exit(); return      
end

if string.find(GLOBALS,"v") then 
   if string.find(GLOBALS,"t") then 
      print (SCRIPT, VERSION," ", "TABLE MODE", "Delimiter:"..	((DELIMITER == "\t") and "TAB" 
                       					   	or
                       					   	(DELIMITER == " ") and "SPACE"
                       					   	or
                       					   	DELIMITER))
   else
      print (SCRIPT,VERSION)
   end
   os.exit()
end

function process_file(f)
   local temp = io.input()
   local filehandle = assert(io.open(f))
   if TABLE then
      process_table(DELIMITER, filehandle)
   else
      for line in io.input(filehandle):lines() do 
         if not process_inputline (line) then break end
      end
   end
   io.close(filehandle)
   io.input(temp)   
return DUMP
end



function process_flags(a)
   BATCH    = string.find(GLOBALS,"b") or BATCH    or a:find("^BA?T?C?H?")
   MASK     = string.find(GLOBALS,"m") or MASK     or a:find("^MA?S?K?")
   TABLE    = string.find(GLOBALS,"t") or TABLE    or a:find("^TAB?L?E?")
   RECORD   = MASK and TABLE

   DEBUG    = DEBUG    and not a:find("^SU?P?P?R?E?S?S?") or a:find("^DEB?U?G?")  and not DEBUG
   TRACE    = TRACE    and not a:find("^SU?P?P?R?E?S?S?") or a:find("^TRA?C?E?")   and not TRACE
   ITER     = ITER     and not a:find("^SU?P?P?R?E?S?S?") or a:find("^IT?E?R?")    and not ITER
   DUMP     = DUMP     or a:find("^DUM?P?")

   MUTE     = MUTE     and not a:find("^VERBO?S?E?")
   MUTE     = MUTE     or a:find("^TA?B?L?E?") and not MUTE
   MUTE     = MUTE     or a:find("^t")     and not MUTE
   MUTE     = MUTE     or a:find("^MUTE")  and not MUTE
   MUTE     = MASK or MUTE or a:find("^q") and not MUTE
   BEST     = string.find(GLOBALS,"b") or BEST     or a:find("^BE?S?T?")
   BEST     = (not string.find(GLOBALS,"f")) or BEST  and not a:find("^FU?L?L?")
   RELATIVE = RELATIVE or a:find("^RE?L?A?T?I?V?E?") or a:find("^r") or a:find("^a") and nil
   return not (DUMP or a:find("^QU?I?T?")) 
end

-- START


continue=not nil
while continue and arg and arg[1] do
   local a = get_next_option(arg)
   if a:find("^IN?C?L?U?D?E?") or a:find("^i") then 
      table.remove(arg,1)
      if DEBUG then print2("INCLUDE ",arg[1]) end
      if MASK then io.write ("\27[H\27[J") end   -- clear screen
      process_file(arg[1])
      continue=DUMP
   else
      continue = process_flags(a)
   end
   table.remove(arg,1)
end

if MASK then
   process_eventloop("\13") 					--< from stdin
elseif TABLE and not string.find(GLOBALS,"i") then
   process_table(DELIMITER)   					--< from stdin
elseif not string.find(GLOBALS,"i") then
   while true do
      if not BATCH then io.write("> ") end 
      local line = io.read()  					--< from stdin
      if line==NIL or not process_inputline (line) then break end
   end
end

print()
if DUMP then dump_connectors() end
if DUMP and DEBUG then dump_probes_and_constraints() end


--[[
process_line ("F = ( (9 / 5 ) * C ) + 32")
process_line ("K = C + 273.15")
process_line ("R = 80 * (C / 100)")


process_line ("C=25")
process_line ("F=212")
process_line ("C")
process_line ("F=212")
process_line ("F")
process_line ("K=0")
process_line ("K")
process_line ("R=80")
process_line ("R")
process_line ("R=0")
process_line ("R")
process_line ("C=100") 
dump_connectors()
--]]


   
   
