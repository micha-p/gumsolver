#! /usr/bin/lua

dofile ("constraints_with_values.lua")

VERSION = "1.0"
SCRIPT=string.match(arg[0],"[^%w%-]*([%w%-]*)$")
TABLE=nil 
DEBUG=nil
PROMPT=nil
DELIMITER=","
CONNECTORS={}

help={}
help[1]="gumsolver -- resolving equations by propagation of uncertainties"
help[2]="usage:    gumsolver [options] [file]"
help[3]="options:  -t             table mode"
help[4]="          -d delimiter   column separator for table"
help[5]="          -i             interactive (use readline wrapper)"
help[6]="          -D             debug messages"
help[7]="          -v             display version"
help[8]="          -h             this help"

while arg[1] do
   TABLE  = TABLE  or arg[1]=="-t"
   PROMPT = PROMPT or arg[1]=="-i" and "> "
   DEBUG  = DEBUG  or arg[1]=="-D"
   if arg[1]=="-d" then 
      table.remove(arg,1)
      DELIMITER = ( arg[1]=="\\t" and "\t" or arg[1])
   end
   if arg[1]=="-h" then 
      for k,v in ipairs (help) do print(v) end; return      
   end
   if arg[1]=="-v" then 
      print ("version "..VERSION); return     
   end
   table.remove(arg,1)
end


function process_new(c,name)
   c[name]=make_connector()
   probe (name, c[name])
   if DEBUG then printprobe2stderr (name, "?") end
return c[name]
end

function process_formula_probe(c, name, expr)
   local function apply (op1, infix, op2)
   return infix=="+" and cadd (op1, op2)
          or
          infix=="-" and csub (op1, op2)
          or
          infix=="*" and cmul (op1, op2)
          or
          infix=="/" and cdiv (op1, op2)
   end

   local function eval(node)
   return stringtest(node) and c[node]
          or
          stringtest(node) and process_new(c, node)
          or
          numbertest(node) and cv(vnew(node))
          or
          tabletest(node) and apply (eval(node[1]),node[2],eval(node[3])) 
          or
          error ("Can't resolve expression: "..node)
   end 
   c[name]=eval(parse(expr))
return not nil
end


function process_line (c, input)   
   local name=input:match("%s*([^=]+)%s*=?")
   local expr=input:match(".*=(.*)$")
   if c[name] then
         if DEBUG then printprobe2stderr (name, expr or "?") end
         run (c, c[name], expr and vreader(expr))
   else 
      if expr then
         process_formula_probe (c, name, expr)
         if DEBUG then printprobe2stderr (name, expr) end
      else
         process_new (c, name)
      end
   end 
end


function printprobe2stderr (name, value)
    io.stderr:write (name .. "\t=\t" .. tostring(value) .."\n")
end

function probe2stderr (name, connector)
  local me = {}
  me = make_actor (function () printprobe2stderr (name, genout (connector.get())) end, function () printprobe2stderr (name,"?") end)
  connector.connect(me)
  return me
end


if TABLE then
   records,header,colnames=csv_read(DELIMITER)
   for col, colname in ipairs(header) do process_column(CONNECTORS, colname) end 
   if DEBUG then 
      for name,connector in pairs(CONNECTORS) do probe2stderr(name,connector) end
      io.stderr:write (SCRIPT.." version "..VERSION.. "   TABLE MODE  Separator:")
      io.stderr:write ((DELIMITER == "\t") and "TAB" 
                       or
                       (DELIMITER == " ") and "SPACE"
                       or
                       DELIMITER) 
      io.stderr:write ("      DEBUGGING TO STDERR\n")
   end
   print(unpack(header))
   for line, record in ipairs(records) do 
      process_record (CONNECTORS, record)
      r= print_result(CONNECTORS, colnames)
      print(unpack(r))
   end
else
  if PROMPT and not DEBUG then io.write(SCRIPT.." version "..VERSION.."\n") end
  if DEBUG  then io.stderr:write(SCRIPT.." version "..VERSION.."   DEBUG MODE\n") end
  if PROMPT then io.write(PROMPT) end
  for line in io.lines() do 
     if line:len() > 0 then process_line (CONNECTORS, line) end
     if PROMPT then io.write(PROMPT) end 
  end
  print()
end






   
   
