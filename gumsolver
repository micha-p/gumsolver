#! /usr/bin/lua

package.path = package.path .. ";include/?.lua"
require 'display'
require 'stderr'
require 'table'

require 'constraints_with_values'   	-- PRINTX redefined
require 'expressions'			-- global CONNECTORS
require 'units'   			-- overwrite: PRINT16, printprobe
require 'process'
require 'csv'
require 'table-mode'
require 'dump'
require 'records'
require 'mask'				-- overwrite printprobe
require 'trace'
require 'optimization'
require 'differentiation'



VERSION = "0.4.0"
SCRIPT=arg and string.match(arg[0],"[^%w%-]*([%w%-]*)$")
TABLE=nil 
PROMPT=nil
MUTE=nil
RELATIVE=nil
DELIMITER="\t"
RECORD=nil
BEST=not nil
ERRORS=not nil
MASK=nil
INFILE=nil
RECORDS={}			-- number : record
DEFINITIONS={}			-- number : string
COLNAMES={}			-- number : string

TRACE=nil
DEBUG=nil
ITER=nil

-- TODO consistant upper and lower case letters for modes

help={}
help[ 1]="gumsolver -- resolving equations by propagation of uncertainties"
help[ 2]="usage:    gumsolver [options]"
help[ 3]="options:  -h             show help and terminate"
help[ 4]="          -v		   show version and terminate"
help[ 5]="          -d delimiter   field separator for input"
help[ 6]="          -a             display absolute uncertainties (default)"
help[ 7]="          -r             display relative uncertainties"
help[ 8]="          -DEBUG         debug messages to stderr (toggle)"
help[ 9]="          -TRACE         trace signals to stderr (toggle)"
help[10]="          -ITER          print iterations to stderr (toggle)"
help[11]="          -R             Restrict output to records"
help[12]="          -I             interactive (readline wrapper suggested)"
help[13]="          -J             interactive (nonscrolling mask)"
help[14]="          -Q             stop working and exit"
help[15]="          -VERSION       display version"
help[16]="          -q             restrict standard output to special commands"
help[17]="          -f file        use file for input"
help[18]="          -t		   table mode (toggle)"
help[19]="          -BEST	   numbers rounded for best visibility (default)"
help[20]="          -FULL	   numbers not rounded"
help[21]="          -ERRORS	   print errors if present (default)"
help[22]="          -SUPPRESS	   suppress errors"  -- TODO adjust behaviour of DEMOfiles


function process_include(f)
   if DEBUG then warn("INCLUDE\t",f,"\n") end
return process_file(f)
end

function process_file(f, toplevel)
   local temp = io.input()
   local filehandle = assert(io.open(f))
   if TABLE then
      process_table(DELIMITER, filehandle)
   else
      for line in io.input(filehandle):lines() do 
         if line:find("^#Q") then 
            if toplevel then 
               print(); os.exit()
            else
               break
           end
         else
            process_input (line)
         end
      end
   end
   io.close(filehandle)
   io.input(temp)   
return not nil
end


function process_stdin()
   while true do
      if PROMPT then io.write(PROMPT) end 
      local line = io.read()
      if line==NIL or line:find("^#Q") then break end
      process_input (line)
   end
   print()
return not nil
end


-- START


while arg and arg[1] do

   TRACE    = TRACE    or arg[1]=="-TRACE"   and not TRACE
   ITER     = ITER     or arg[1]=="-ITER"    and not ITER
   DEBUG    = DEBUG    or arg[1]=="-DEBUG"   and not DEBUG
   TABLE    = TABLE    or arg[1]=="-TABLE"   and not TABLE
   TABLE    = TABLE    or arg[1]=="-t"       and not TABLE
   MASK     = MASK     or arg[1]=="-MASK"    and not MASK
   RECORD   = RECORD   or arg[1]=="-R"       and not RECORD
   MUTE     = MUTE     and not (arg[1]=="-VERBOSE")
   MUTE     = MUTE     or (arg[1]=="-TABLE") and not MUTE
   MUTE     = MUTE     or (arg[1]=="-t")     and not MUTE
   MUTE     = MUTE     or (arg[1]=="-MUTE")  and not MUTE
   MUTE     = MUTE     or (arg[1]=="-q")     and not MUTE
   BEST     = BEST     or (arg[1]=="-BEST")
   BEST     = BEST     and not (arg[1]=="-FULL")
   ERRORS   = ERRORS   or arg[1]=="-ERRORS"
   ERRORS   = ERRORS   and not (arg[1]=="-SUPPRESS") 
   RELATIVE = RELATIVE or arg[1]=="-r" or arg[1]=="-a" and nil
   
   if arg[1]=="-I" then 
      TABLE=nil
      table.remove(arg,1)
      if INFILE then print() end
      print (SCRIPT.." version "..VERSION)
      PROMPT="> "
      process_stdin()
   end
   if arg[1]=="-J" then 
      table.remove(arg,1)
      MASK = not nil
      TABLE=nil
      MUTE=nil
      PROMPT="> "
      printfullmask()
      process_eventloop()
      MASK = nil
   end
   if arg[1]=="-f" then 
      table.remove(arg,1)
      INFILE = not nil
      if MASK then io.write ("\27[H\27[J") end   -- clear screen
      process_file(arg[1], nil)
   end
   if arg[1]=="-d" then 
      table.remove(arg,1)
      DELIMITER = ( arg[1]=="\\t" and "\t" or arg[1])
   end
   if arg[1]=="-h" then 
      for k,v in ipairs (help) do print(v) end; return      
   end
   if arg[1]=="-v" then 
      print ("version "..VERSION); return     
   end
   if arg[1]=="-Q" then 
      print (); os.exit(); return     
   end
   table.remove(arg,1)
end

if MASK then
   process_eventloop("\13") 		--< from stdin
else
   if not PROMPT and not INFILE then
      if TABLE then
         process_table(DELIMITER)   	--< from stdin
      else
         process_stdin()
      end
   end
end



--[[
process_line ("F = ( (9 / 5 ) * C ) + 32")
process_line ("K = C + 273.15")
process_line ("R = 80 * (C / 100)")


process_line ("C=25")
process_line ("F=212")
process_line ("C")
process_line ("F=212")
process_line ("F")
process_line ("K=0")
process_line ("K")
process_line ("R=80")
process_line ("R")
process_line ("R=0")
process_line ("R")
process_line ("C=100") 
dump_connectors()
--]]


   
   
