#! /usr/bin/lua

package.path = package.path .. ";include/?.lua"
require 'display'
require 'table'

require 'expressions'
require 'process'
require 'csv'
require 'table-mode'
require 'constraints_with_values'
require 'dump'
require 'records'
require 'mask'
require 'trace'
require 'units'


VERSION = "0.3.0"
SCRIPT=arg and string.match(arg[0],"[^%w%-]*([%w%-]*)$")
TABLE=nil 
PROMPT=nil
MUTE=nil
RELATIVE=nil
DELIMITER="\t"
RECORD=nil
DEBUG=nil
MASK=nil
INFILE=nil
TRACE=nil
RECORDS={}			-- number : record
DEFINITIONS={}			-- number : string
COLNAMES={}			-- number : string


-- overwrite !!!!
function printprobe (name, value, unit)
   if MASK then printmaskline (name, value, unit) end
   if DEBUG then warn (PRINT16 (name), PRINT16 (unit or ""), value) end
   if TRACE then warn (short(CONNECTORS[name]), PRINT16 (name), PRINT16 (unit or ""), value) end
   if not MUTE and not MASK then print (PRINT16 (name), PRINT16 (unit or ""), value) end
end
    


help={}
help[ 1]="gumsolver -- resolving equations by propagation of uncertainties"
help[ 2]="usage:    gumsolver [options]"
help[ 3]="options:  -h             show help and terminate"
help[ 4]="          -v		   show version and terminate"
help[ 5]="          -d delimiter   field separator for input"
help[ 6]="          -a             display absolute uncertainties (default)"
help[ 7]="          -r             display relative uncertainties"
help[ 8]="          -D             debug messages to stderr (toggle)"
help[ 9]="          --TRACE        trace signals to stderr (toggle)"
help[10]="          -R             Restrict output to records"
help[11]="          -I             interactive (readline wrapper suggested)"
help[12]="          -J             interactive (nonscrolling mask)"
help[12]="          -Q             stop working and exit"
help[13]="          --VERSION      display version"
help[14]="          -q             restrict standard output to special commands"
help[15]="          -f file        use file for input"


function process_include(f)
   if DEBUG then warn("INCLUDE\t",f,"\n") end
return process_file(f)
end

function process_file(f, toplevel)
   local temp = io.input()
   local filehandle = assert(io.open(f))
   if TABLE then
      process_table(CONNECTORS, DELIMITER, filehandle)
   else
      for line in io.input(filehandle):lines() do 
         if line:find("^#Q") then 
            if toplevel then 
               print(); os.exit()
            else
               break
           end
         else
            process_input (line)
         end
      end
   end
   io.close(filehandle)
   io.input(temp)   
return not nil
end


function process_stdin()
   while true do
      if PROMPT then io.write(PROMPT) end 
      local line = io.read()
      if line==NIL or line:find("^#Q") then break end
      process_input (line)
   end
   print()
return not nil
end


-- START


while arg and arg[1] do

   TRACE    = TRACE    or arg[1]=="--TRACE" and not TRACE
   TABLE    = TABLE    or arg[1]=="-t"      and not TABLE
   DEBUG    = DEBUG    or arg[1]=="-D"      and not DEBUG
   RECORD   = RECORD   or arg[1]=="-R"      and not RECORD
   MUTE     = MUTE     or arg[1]=="-q"      and not MUTE
   RELATIVE = RELATIVE or arg[1]=="-R" or arg[1]=="-A" and nil

   if arg[1]=="-I" then 
      table.remove(arg,1)
      print (SCRIPT.." version "..VERSION)
      print()
      print()
      PROMPT = "> "
   end
   if arg[1]=="-J" then 
      table.remove(arg,1)
      print ("\27[H\27[J")
      MASK = not nil
   end
   if arg[1]=="-f" then 
      table.remove(arg,1)
      INFILE = not nil
      process_file(arg[1], not nil)
   end
   if arg[1]=="-d" then 
      table.remove(arg,1)
      DELIMITER = ( arg[1]=="\\t" and "\t" or arg[1])
   end
   if arg[1]=="-h" then 
      for k,v in ipairs (help) do print(v) end; return      
   end
   if arg[1]=="-v" then 
      print ("version "..VERSION); return     
   end
   if arg[1]=="-Q" then 
      print (); os.exit(); return     
   end
   table.remove(arg,1)
end

if MASK then
   loop()
elseif not INFILE then
   if TABLE then
      process_table(CONNECTORS, DELIMITER)
   else
      process_stdin()
   end
elseif PROMPT then 
   process_stdin()
end



--[[
process_line ("F = ( (9 / 5 ) * C ) + 32")
process_line ("K = C + 273.15")
process_line ("R = 80 * (C / 100)")


process_line ("C=25")
process_line ("F=212")
process_line ("C")
process_line ("F=212")
process_line ("F")
process_line ("K=0")
process_line ("K")
process_line ("R=80")
process_line ("R")
process_line ("R=0")
process_line ("R")
process_line ("C=100") 
dump_connectors()
--]]


   
   
